/* ListNode.java */
class ListNode{  
int data;  ListNode next;  public ListNode(){    next = null;  }  public ListNode(Integer e){    next = null;    data = e;  }}
/* Interface ISet */interface ISet{  boolean add(Integer e);  boolean contains(Integer e);  boolean remove(Integer e);  int size();  void display();}
/* Class HashSet */class HashSet implements ISet{  ListNode[] buckets;  int size;  public HashSet(){    buckets = new ListNode[10];    for(int i = 0; i < buckets.length; i++)      buckets[i] = new ListNode();    size = 0;  }    public int hashFunction(Integer e){    return (e.hashCode() % buckets.length);  }    public boolean add(Integer e){    int bindex = hashFunction(e);    ++size;    if(contains(e)) return false;    int avg = (size / buckets.length);    if(avg > 10){      rehash();    }    ListNode temp = new ListNode(e);    temp.next = buckets[bindex].next;    buckets[bindex].next = temp;    return true;  }    public boolean rehash(){        ListNode[] newBuckets = new ListNode[buckets.length*2];    for(int i = 0; i < newBuckets.length; i++)      newBuckets[i] = new ListNode();    int i = 0;        size = 0;    for(i = 0; i < buckets.length; i++){            ListNode current = buckets[i];      if(current!=null){        ListNode iter = current.next;              while(iter!=null){                  int bindex = hashFunction(iter.data);          int avg = (size / buckets.length);              ++size;              ListNode temp = new ListNode(iter.data);              temp.next = newBuckets[bindex].next;              newBuckets[bindex].next = temp;             iter = iter.next;              }            }    }    buckets = newBuckets;    newBuckets = null;    return true;  }    public boolean contains(Integer e){    int bindex = hashFunction(e);    if(buckets[bindex]!=null){      for(ListNode current = buckets[bindex].next; current != null; current = current.next){        if(current.data == e)          return true;      }    }    return false;  }    public boolean remove(Integer e){    int bindex = hashFunction(e);    if(!contains(e)) return false;    ListNode temp = buckets[bindex];    ListNode current = buckets[bindex].next;    for(; current != null; current = current.next){      if(current.data == e){          break;      }      temp = current;      current = current.next;    }    temp = current.next.next;    current.next = null;    return true;  }    public int size(){    return size;  }    public void display(){        for(int i = 0; i < buckets.length; i++){      ListNode current = buckets[i];      if(current!=null){        System.out.print("Bucket-"+i+":");        ListNode iter = current.next;        while(iter!=null){          System.out.print(iter.data+" ");          iter = iter.next;        }        System.out.println();      }    }  }}
public class Application{  public static void main(String... args){    Integer[] e = new Integer[20];    java.util.Random r = new java.util.Random();    for(int i = 0; i < e.length; i++){      e[i] = r.nextInt(20000);    }    HashSet set = new HashSet();    for(Integer a : e){     set.add(a);    }    set.display();  }}
